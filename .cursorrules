# Marketing Platform - Agent-Specific Rules

## IMPORTANT: File Organization Principle
- **README.md**: Contains information for ALL engineers (human and AI agents)
- **.cursorrules**: Contains ONLY agent-specific instructions and behaviors
- When updating documentation, follow this separation strictly

## Agent Behavior Guidelines

### Testing Commands
- **Always use `npm run test:agent`** instead of `npm test` - it uses line reporter for cleaner output
- Avoid opening HTML reports or UI testing tools unless specifically requested

### Development Server Management
- **ALWAYS check if dev server is already running** before starting a new one
- Port 3000 is the default Next.js port (check with `lsof -i :3000`)
- HMR handles most changes - only restart for config/dependency/env changes
- Use `lsof -i :3000` to check, `kill -9 <PID>` to kill if needed

### Code Generation Rules
- Use `"*"` instead of `"workspace:*"` for internal dependencies
- Escape apostrophes in JSX with `&apos;`
- Use simple Tailwind classes, avoid CSS variables like `bg-background`
- Each Next.js app needs its own .eslintrc.js with `extends: ['next/core-web-vitals']`

### Error Handling
- **npm workspace errors in dev**: These can be ignored - they don't break functionality
- **metadataBase warning**: This is informational only - don't fix unless working on production deployment
- After making changes, always check logs for new errors before concluding

### File Management
- Use `tmp/` directory for temporary scripts and experiments
- Clean up tmp files after task completion
- Don't commit changes to tmp/ - it's gitignored

### Critical Workflow
1. **Check if dev server is already running** before starting a new one
2. **Always check port 3000** first (Next.js default)
3. **Run `npm run test:agent`** not `npm test` for cleaner output
4. **Use existing components** from @marketing/ui before creating new ones
5. **Build after changes** to catch compilation errors early
6. **Keep CSS simple** - use Tailwind utilities, not custom variables
7. **Kill old processes properly** if restart is needed

### Component Development
- Always check @marketing/ui for existing components first
- Don't create new UI components unless they don't exist
- Follow the CVA (class-variance-authority) pattern for variants

### Communication Style
- Don't mention tool names to users - describe actions naturally
- After changes, report what was done and verify it works
- If errors occur, investigate and fix rather than just reporting them

## Project Context
This is a monorepo for multiple marketing websites using:
- Turborepo for build orchestration
- Next.js 14 with App Router
- Tailwind CSS (without complex CSS variables)
- TypeScript
- Playwright for E2E tests

Current apps: clarkstontechnology
Planned apps: spiritual-direction, esl-teaching, familee, johnanddinah 

## Testing (NO EXCEPTIONS)
**ALL projects MUST have unit tests, integration tests, AND end-to-end tests**
- Only skip if the user EXPLICITLY states to skip writing tests this time
- Follow TDD for every feature/bugfix:
  1. Write failing test
  2. Confirm failure
  3. Write minimal code to pass
  4. Confirm success
  5. Refactor while keeping tests green
- NEVER mock in end-to-end tests (use real data/APIs)
- Test output must be PRISTINE - capture and test expected errors
- NEVER ignore system or test output

## Debugging Process
**ALWAYS find root cause - NEVER fix symptoms or add workarounds**

### Phase 1 - Investigation:
- Read error messages carefully
- Reproduce consistently
- Check recent changes (git diff, commits)

### Phase 2 - Analysis:
- Find working examples in codebase
- Compare against reference implementations
- Identify differences between working/broken code
- Understand dependencies

### Phase 3 - Testing:
- Form single hypothesis about root cause
- Make smallest possible test change
- Verify before continuing
- Say "I don't understand X" vs pretending to know

### Phase 4 - Implementation:
- Simplest possible failing test case
- NEVER add multiple fixes at once
- NEVER claim to implement pattern without reading it completely
- Test after each change
- If first fix fails, re-analyze vs adding more fixes 